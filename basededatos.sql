-- MySQL Script generated by MySQL Workbench
-- 03/15/15 23:24:30
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema restaurante
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema restaurante
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `restaurante` DEFAULT CHARACTER SET utf8 ;
USE `restaurante` ;

-- -----------------------------------------------------
-- Table `restaurante`.`bebida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`bebida` (
  `idBebida` INT(11) NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(45) NOT NULL,
  `Precio` VARCHAR(45) NOT NULL,
  `Stock` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idBebida`))
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = big5;


-- -----------------------------------------------------
-- Table `restaurante`.`cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`cliente` (
  `idCliente` INT(11) NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL,
  `Apellido` VARCHAR(45) NOT NULL,
  `Cedula` VARCHAR(45) NOT NULL,
  `Direccion` VARCHAR(45) NOT NULL,
  `Telefono` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCliente`))
ENGINE = InnoDB
AUTO_INCREMENT = 4
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`cargo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`cargo` (
  `idCargo` INT(11) NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(45) NOT NULL,
  `Sueldo` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCargo`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`empleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`empleado` (
  `idEmpleado` INT(11) NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL,
  `Apellido` VARCHAR(45) NOT NULL,
  `Cedula` VARCHAR(45) NOT NULL,
  `Direccion` VARCHAR(45) NOT NULL,
  `Telefono` VARCHAR(45) NOT NULL,
  `FechaInicio` DATE NULL DEFAULT NULL,
  `FechaNacimiento` DATE NULL DEFAULT NULL,
  `Cargo_idCargo` INT(11) NOT NULL,
  PRIMARY KEY (`idEmpleado`),
  INDEX `fk_Empleado_Cargo_idx` (`Cargo_idCargo` ASC),
  CONSTRAINT `fk_Empleado_Cargo`
    FOREIGN KEY (`Cargo_idCargo`)
    REFERENCES `restaurante`.`cargo` (`idCargo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`mesa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`mesa` (
  `idMesa` INT(11) NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(45) NOT NULL,
  `Asientos` VARCHAR(45) NOT NULL,
  `Estado` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idMesa`))
ENGINE = InnoDB
AUTO_INCREMENT = 8
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`reservar`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`reservar` (
  `idReservacion` INT(11) NOT NULL AUTO_INCREMENT,
  `Fecha` VARCHAR(45) NOT NULL,
  `Hora` VARCHAR(45) NOT NULL,
  `CantidadPersona` VARCHAR(45) NOT NULL,
  `TipoReservacion` VARCHAR(45) NOT NULL,
  `Cliente_idCliente` INT(11) NOT NULL,
  `Mesa_idMesa` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idReservacion`),
  INDEX `fk_Reservar_Cliente1_idx` (`Cliente_idCliente` ASC),
  INDEX `fk_Reservar_Mesa1_idx` (`Mesa_idMesa` ASC),
  CONSTRAINT `fk_Reservar_Cliente1`
    FOREIGN KEY (`Cliente_idCliente`)
    REFERENCES `restaurante`.`cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Reservar_Mesa1`
    FOREIGN KEY (`Mesa_idMesa`)
    REFERENCES `restaurante`.`mesa` (`idMesa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 12
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`pedido` (
  `idPedido` INT(11) NOT NULL AUTO_INCREMENT,
  `Fecha` DATE NULL DEFAULT NULL,
  `Estado` VARCHAR(45) NOT NULL,
  `Cantidad` VARCHAR(45) NOT NULL,
  `Empleado_idEmpleado` INT(11) NOT NULL,
  `Mesa_idMesa` INT(11) NULL DEFAULT NULL,
  `Cliente_idCliente` INT(11) NULL DEFAULT NULL,
  `Reservar_idReservacion` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idPedido`),
  INDEX `fk_Pedido_Empleado1_idx` (`Empleado_idEmpleado` ASC),
  INDEX `fk_Pedido_Mesa1_idx` (`Mesa_idMesa` ASC),
  INDEX `fk_Pedido_Cliente1_idx` (`Cliente_idCliente` ASC),
  INDEX `fk_Pedido_Reservar1_idx` (`Reservar_idReservacion` ASC),
  CONSTRAINT `fk_Pedido_Cliente1`
    FOREIGN KEY (`Cliente_idCliente`)
    REFERENCES `restaurante`.`cliente` (`idCliente`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_Empleado1`
    FOREIGN KEY (`Empleado_idEmpleado`)
    REFERENCES `restaurante`.`empleado` (`idEmpleado`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_Mesa1`
    FOREIGN KEY (`Mesa_idMesa`)
    REFERENCES `restaurante`.`mesa` (`idMesa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_Reservar1`
    FOREIGN KEY (`Reservar_idReservacion`)
    REFERENCES `restaurante`.`reservar` (`idReservacion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`bebidapedida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`bebidapedida` (
  `idBebidaPedida` VARCHAR(45) NOT NULL,
  `Pedido_idPedido` INT(11) NOT NULL,
  `Bebida_idBebida` INT(11) NOT NULL,
  PRIMARY KEY (`idBebidaPedida`),
  INDEX `fk_Pedido_has_Bebida_Bebida1_idx` (`Bebida_idBebida` ASC),
  INDEX `fk_Pedido_has_Bebida_Pedido1_idx` (`Pedido_idPedido` ASC),
  CONSTRAINT `fk_Pedido_has_Bebida_Bebida1`
    FOREIGN KEY (`Bebida_idBebida`)
    REFERENCES `restaurante`.`bebida` (`idBebida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pedido_has_Bebida_Pedido1`
    FOREIGN KEY (`Pedido_idPedido`)
    REFERENCES `restaurante`.`pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`factura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`factura` (
  `NumFactura` INT(11) NOT NULL AUTO_INCREMENT,
  `FechaFactura` DATE NULL DEFAULT NULL,
  `SubTotal` VARCHAR(45) NOT NULL,
  `IVA` VARCHAR(45) NOT NULL,
  `Total` VARCHAR(45) NOT NULL,
  `FormadePago` VARCHAR(20) NULL DEFAULT NULL,
  PRIMARY KEY (`NumFactura`))
ENGINE = InnoDB
AUTO_INCREMENT = 10
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`tipoplato`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`tipoplato` (
  `idTipoPlato` INT(11) NOT NULL AUTO_INCREMENT,
  `Descripcion` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idTipoPlato`))
ENGINE = InnoDB
AUTO_INCREMENT = 5
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`nombreplato`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`nombreplato` (
  `idNombrePlato` INT(11) NOT NULL AUTO_INCREMENT,
  `Nombre` VARCHAR(45) NOT NULL,
  `TipoPlato_idTipoPlato` INT(11) NOT NULL,
  PRIMARY KEY (`idNombrePlato`),
  INDEX `fk_NombrePlato_TipoPlato1_idx` (`TipoPlato_idTipoPlato` ASC),
  CONSTRAINT `fk_NombrePlato_TipoPlato1`
    FOREIGN KEY (`TipoPlato_idTipoPlato`)
    REFERENCES `restaurante`.`tipoplato` (`idTipoPlato`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`plato`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`plato` (
  `idPlato` INT(11) NOT NULL AUTO_INCREMENT,
  `Fecha` DATE NULL DEFAULT NULL,
  `Stock` VARCHAR(45) NOT NULL,
  `NombrePlato_idNombrePlato` INT(11) NOT NULL,
  `precio` INT(11) NULL DEFAULT NULL,
  PRIMARY KEY (`idPlato`),
  INDEX `fk_Plato_NombrePlato1_idx` (`NombrePlato_idNombrePlato` ASC),
  CONSTRAINT `fk_Plato_NombrePlato1`
    FOREIGN KEY (`NombrePlato_idNombrePlato`)
    REFERENCES `restaurante`.`nombreplato` (`idNombrePlato`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
AUTO_INCREMENT = 17
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`platopedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`platopedido` (
  `idPlatoPedido` INT(11) NOT NULL AUTO_INCREMENT,
  `Plato_idPlato` INT(11) NOT NULL,
  `Pedido_idPedido` INT(11) NOT NULL,
  PRIMARY KEY (`idPlatoPedido`),
  INDEX `fk_PlatoPedido_Plato1_idx` (`Plato_idPlato` ASC),
  INDEX `fk_PlatoPedido_Pedido1_idx` (`Pedido_idPedido` ASC),
  CONSTRAINT `fk_PlatoPedido_Pedido1`
    FOREIGN KEY (`Pedido_idPedido`)
    REFERENCES `restaurante`.`pedido` (`idPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PlatoPedido_Plato1`
    FOREIGN KEY (`Plato_idPlato`)
    REFERENCES `restaurante`.`plato` (`idPlato`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`detallefactura`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`detallefactura` (
  `idDetalleFactura` INT(11) NOT NULL AUTO_INCREMENT,
  `Cantidad` VARCHAR(45) NOT NULL,
  `Descripcion` VARCHAR(45) NOT NULL,
  `PrecioUnitario` VARCHAR(45) NOT NULL,
  `PrecioTotal` VARCHAR(45) NOT NULL,
  `Factura_NumFactura` INT(11) NOT NULL,
  `PlatoPedido_idPlatoPedido` INT(11) NULL DEFAULT NULL,
  `BebidaPedida_idBebidaPedida` VARCHAR(45) NULL DEFAULT NULL,
  PRIMARY KEY (`idDetalleFactura`),
  INDEX `fk_DetalleFactura_Factura1_idx` (`Factura_NumFactura` ASC),
  INDEX `fk_DetalleFactura_PlatoPedido1_idx` (`PlatoPedido_idPlatoPedido` ASC),
  INDEX `fk_DetalleFactura_BebidaPedida1_idx` (`BebidaPedida_idBebidaPedida` ASC),
  CONSTRAINT `fk_DetalleFactura_BebidaPedida1`
    FOREIGN KEY (`BebidaPedida_idBebidaPedida`)
    REFERENCES `restaurante`.`bebidapedida` (`idBebidaPedida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DetalleFactura_Factura1`
    FOREIGN KEY (`Factura_NumFactura`)
    REFERENCES `restaurante`.`factura` (`NumFactura`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DetalleFactura_PlatoPedido1`
    FOREIGN KEY (`PlatoPedido_idPlatoPedido`)
    REFERENCES `restaurante`.`platopedido` (`idPlatoPedido`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `restaurante`.`forma_pago`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `restaurante`.`forma_pago` (
  `F_pago_id` INT(11) NOT NULL AUTO_INCREMENT,
  `tipo` VARCHAR(45) NOT NULL,
  `NumFactura1` INT(11) NOT NULL,
  PRIMARY KEY (`F_pago_id`),
  INDEX `NumFactura1` (`NumFactura1` ASC),
  CONSTRAINT `forma_pago_ibfk_1`
    FOREIGN KEY (`NumFactura1`)
    REFERENCES `restaurante`.`factura` (`NumFactura`))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;

USE `restaurante` ;

-- -----------------------------------------------------
-- procedure buscarBebida
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarBebida`()
begin
select b.Descripcion, b.Precio
from bebida b;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscarCliente
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarCliente`()
begin
select idCliente,nombre, apellido,Telefono
from cliente;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscarEntrada
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarEntrada`()
begin
select n.Nombre, p.precio
from plato p ,nombreplato n, tipoplato t
where p.NombrePlato_idNombrePlato = n.idNombrePlato and n.TipoPlato_idTipoPlato = t.idTipoPlato and t.descripcion="entrada" ;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscarPFuerte
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarPFuerte`()
begin
select n.nombre, p.precio
from plato p ,nombreplato n, tipoplato t
where p.NombrePlato_idNombrePlato = n.idNombrePlato and n.TipoPlato_idTipoPlato = t.idTipoPlato and t.Descripcion="plato fuerte" ;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscarPiqueo
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarPiqueo`()
begin
select n.Nombre, p.precio
from plato p ,nombreplato n, tipoplato t
where p.NombrePlato_idNombrePlato = n.idNombrePlato and n.TipoPlato_idTipoPlato = t.idTipoPlato and t.descripcion like "%piqueo%";
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure buscarPostre
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `buscarPostre`()
begin
select n.Nombre, p.precio
from plato p ,nombreplato n, tipoplato t
where p.NombrePlato_idNombrePlato = n.idNombrePlato and n.TipoPlato_idTipoPlato = t.idTipoPlato and t.descripcion="postre" ;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure busquedaPedidoBebida
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `busquedaPedidoBebida`()
begin
select b.Descripcion, count(b.Descripcion) as cantidad, b.Precio, b.precio*count(b.Descripcion) as Subtotal
from bebidapedida bp, pedido pe, bebida b
where bp.Bebida_idBebida=b.idBebida and bp.Pedido_idPedido=pe.idPedido
group by b.Descripcion;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure busquedaPedidoPlato
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `busquedaPedidoPlato`()
begin
select n.Nombre, count(n.Nombre) as cantidad
from platopedido pp, pedido pe, plato pl, nombreplato n, tipoplato t
where pp.Plato_idPlato=pl.idPlato and pp.pedido_idpedido=pe.idpedido and pl.NombrePlato_idNombrePlato=n.idNombrePlato and n.TipoPlato_idTipoPlato=t.idTipoPlato
group by n.nombre;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure colas
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `colas`()
begin
Select b.descripcion, b.Precio
from bebida b
where b.Precio <= "2";
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure informe2
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `informe2`()
select f.NumFactura, fp.tipo, f.total,
extract(MONTH FROM f.FechaFactura) AS meses
from factura f, forma_pago fp
where f.NumFactura=fp.NumFactura1
group by meses$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure informe3
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `informe3`()
select sum(Total),extract(MONTH FROM FechaFactura) AS meses
 from factura 
 group by meses$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure informe_mensual
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `informe_mensual`()
begin
select sum(f.subtotal)
from factura f
join forma_pago fp on f.NumFactura=fp.NumFactura1
group by fp.tipo;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ingreso_bebida
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `ingreso_bebida`(
		
         IN  des      varchar(25),
         IN  pre    varchar(45),
         In  sto     varchar(45)
        
	)
BEGIN 

    INSERT INTO bebida
         (Descripcion, Precio,Stock)
    VALUES 
         ( 
			des,
			pre,
			sto
		) ;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarBebidas
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarBebidas`()
begin
select idBebida, Descripcion, Precio, Stock
from bebida;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarCargo
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarCargo`()
begin
select idCargo,descripcion,sueldo
from cargo;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarEmpleado
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarEmpleado`()
begin
select idEmpleado,nombre, Apellido,cargo.Descripcion, FechaInicio
from empleado e, cargo
where e.cargo_idCargo=cargo.idCargo;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarMenu
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarMenu`()
begin
select np.idNombrePlato, np.nombre as descripcion, p.stock, p.Fecha
from plato p, nombreplato np
where p.nombrePlato_idnombreplato=np.idnombreplato;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarMesas
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarMesas`()
begin
select idMesa, asientos, Estado
from mesa;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mostrarReservacion
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `mostrarReservacion`()
begin
select c.Nombre, r.Mesa_idMesa, r.Hora
from reservar r , pedido p, cliente c
where p.idPedido = r.idReservacion and c.idCliente = r.Cliente_idCliente;
end$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sumasubtotales
-- -----------------------------------------------------

DELIMITER $$
USE `restaurante`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `sumasubtotales`()
begin
select sum(f.Subtotal) as Subtotalxd, fp.tipo
from factura f
JOIN forma_pago fp ON f.formadepago =fp.F_pago_id
group by fp.tipo;
end$$

DELIMITER ;
USE `restaurante`;

DELIMITER $$
USE `restaurante`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `restaurante`.`bebidaUnica`
BEFORE INSERT ON `restaurante`.`bebida`
FOR EACH ROW
begin
if(new.Descripcion = (select Descripcion from bebida where Descripcion like new.descripcion))
#><
then signal sqlstate '45000' set message_text = "Bebida ya existe"; end if;
end$$

USE `restaurante`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `restaurante`.`clienteUnico`
BEFORE INSERT ON `restaurante`.`cliente`
FOR EACH ROW
begin
if(new.Cedula = (select Cedula from cliente where Cedula like new.Cedula))
#><
then signal sqlstate '45000' set message_text = "Cliente ya existe"; end if;
end$$

USE `restaurante`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `restaurante`.`limiteSueldo`
BEFORE INSERT ON `restaurante`.`cargo`
FOR EACH ROW
begin
if(new.Sueldo<'354')
#><
then signal sqlstate '45000' set message_text = "sueldo no valido"; end if;
end$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
